package com.fallntic.servicesideapp;

import android.app.Service;
import android.content.Intent;
import android.nfc.Tag;
import android.os.Binder;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.os.Messenger;
import android.os.RemoteException;
import android.util.Log;
import android.widget.Toast;

import androidx.annotation.Nullable;

import java.util.Random;

public class MyService extends Service {
    private static final String TAG = "MyService";

    //Hold the random number that is being generated by the service
    private int mRandomNumber;

    //Boolean variable used to either switch on or switch off the random number generator.
    private boolean mIsRandomGeneratorOn;

    //Generate random number between MIN and MAX
    private final int MIN = 0;
    private final int MAX = 100;

    /*
        A flag: if a request is gotten with this particular flag, that means that somebody is
        requesting us to send a random number
     */
    public static final int GET_COUNT = 0;

    private class RandomNumberRequestHandler extends Handler {
        /**
         * handleMessage: check if the constant what is equal to our flag GET_COUNT to get
         * the message (a random number) and assign it to the argument 1 (arg1) and finally
         * msg.replyTo.send(messageSendRandomNumber) will return a messenger and then to that
         * particular messenger we will send the random number message.
         * The logic is:
         * 1. Get hold of the message
         * 2. Set the random number in Message
         * 3. Send the Message back to requester (Messenger)
         * @param msg
         */
        @Override
        public void handleMessage(Message msg) {
            Log.i(getString(R.string.service_demo_tag), "Message intercepted");
            switch (msg.what) {
                case GET_COUNT:
                    Message messageSendRandomNumber = Message.obtain(null, GET_COUNT);
                    messageSendRandomNumber.arg1 = getRandomNumber();
                    try {
                        Log.i(getString(R.string.service_demo_tag), "Replaying with random number to requester");
                        msg.replyTo.send(messageSendRandomNumber);
                    } catch (RemoteException e) {
                        Log.i(getString(R.string.service_demo_tag), "" + e.getMessage());
                    }
            }
            super.handleMessage(msg);
        }
    }

    //We create a new messenger.
    private Messenger randomNumberMessenger = new Messenger(new RandomNumberRequestHandler());

    /**
     * Return an iBinder interface from the messenger
     * @param intent
     * @return
     */
    @Nullable
    @Override
    public IBinder onBind(Intent intent) {
        Log.d(TAG, "Package name: " + intent.getPackage());
        if (intent.getPackage().equals("com.fallntic.clientsidebinderapp")){
            Toast.makeText(getApplicationContext(), "Correct Package", Toast.LENGTH_SHORT);
        }
        else {
            Toast.makeText(getApplicationContext(), "Wrong Package", Toast.LENGTH_SHORT);
        }
        return randomNumberMessenger.getBinder();
    }

    /**
     * Implement iBinder
     */
    class MyServiceBinder extends Binder {
        /**
         * Method getService overriden to return a service
         *
         * @return
         */
        public MyService getService() {
            return MyService.this;
        }
    }

    private IBinder mBinder = new MyServiceBinder();

    @Override
    public void onRebind(Intent intent) {
        super.onRebind(intent);
        Log.i(getString(R.string.service_demo_tag), "In OnReBind");
    }

    @Override
    public void onStart(Intent intent, int startId) {
        super.onStart(intent, startId);
        Log.i(getString(R.string.service_demo_tag), "Service Started");
    }

    /**
     * Stop the random number generator when the activity is destroyed.
     */
    @Override
    public void onDestroy() {
        super.onDestroy();
        //stopRandomNumberGenerator();
        Log.i(getString(R.string.service_demo_tag), "Service Destroyed");
    }

    /**
     * @param intent
     * @param flags
     * @param startId
     * @return When the service gets started, the onStartCommand of the service gets executed first and
     * that is where the random number generator is started
     */
    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        Log.i(getString(R.string.service_demo_tag), "In onStartCommend, thread id: " + Thread.currentThread().getId());
        mIsRandomGeneratorOn = true;
        new Thread(new Runnable() {
            @Override
            public void run() {
                startRandomNumberGenerator();
            }
        }).start();
        return START_STICKY;
    }

    /**
     * Start the random number generator:
     * First, check if the variable mIsRandomGeneratorOn. If it is True, then generate the random number.
     * Thread.sleep(1000) is used to slow dowd the random number generator for 1 second.
     * The random number generated is displayed to the logcat.
     * Called on onStartCommand function
     */
    private void startRandomNumberGenerator() {
        while (mIsRandomGeneratorOn) {
            try {
                Thread.sleep(1000);
                if (mIsRandomGeneratorOn) {
                    mRandomNumber = new Random().nextInt(MAX) + MIN;
                    Log.i(getString(R.string.service_demo_tag), "Thread id: " + Thread.currentThread().getId() + ", Random Number: " + mRandomNumber);
                }
            } catch (InterruptedException e) {
                Log.i(getString(R.string.service_demo_tag), "Thread Interrupted");
            }

        }
    }

    /**
     * @return false
     * Stop the random number generator
     * called on the onDestroy function
     */
    private void stopRandomNumberGenerator() {
        mIsRandomGeneratorOn = false;
    }

    @Override
    public boolean onUnbind(Intent intent) {
        Log.i(getString(R.string.service_demo_tag), "In onUnbind");
        return super.onUnbind(intent);
    }

    public int getRandomNumber() {
        return mRandomNumber;
    }
}